<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe24.smart_academy.academy_manage.courseandscore.mapper.CourseAndScoreMapper">
	
	<!-- 관리자 : 전체 학생 수강신청 리스트 -->
	<!-- 관리자 : 학생 수강신청 상세보기 -->
	<!-- 관리자 : 특정 강좌에 수강신청한 학생들 리스트 -->
	<!-- 관리자 : 학생 전체 수강신청 검색결과 리스트 -->
	<!-- 학생 : 특정 학생의 수강신청 목록 보기 -->
	<select id="courseEnrolleeOneOrList"
			parameterType="com.cafe24.smart_academy.academy_manage.course.vo.CourseRoomSearchVO"
			resultType="map">
		select
			 ce.course_enrollee_no					AS courseEnrolleeNo
			,ce.member_id							AS memberId
			,ce.course_enrollee_registered_date		AS courseEnrolleeRegisteredDate
			,mem.member_name						AS memberName
			,mem.member_birth						AS memberBirth
			,mem.member_email						AS memberEmail
			,mem.member_phone						AS memberPhone
			,sub.subject_no							AS subjectNo
			,sub.subject_name						AS subjectName
			,ce.course_no							AS courseNo
			,co.course_name							AS courseName
			,aro.room_number						AS roomNumber
			,aro.room_floor							AS roomFloor
			,pay.start_course_day					AS startCourseDay
			,pay.end_course_day						AS endCourseDay
			,par.parent_name						AS parentName
			,par.parent_phone						AS parentPhone
		from
			 course_enrollee			AS ce
			,course						AS co
			,subject					AS sub
			,course_room_assignment		AS cra
			,academy_room				AS aro
			,member_login				AS login
			,member						AS mem
			,payment_info				AS pay
			,parent						AS par
		where
			ce.course_no		= co.course_no
		and
			ce.member_id		= login.member_id
		and
			co.subject_no		= sub.subject_no
		and
			cra.course_no		= co.course_no
		and
			cra.room_no			= aro.room_no
		and
			login.member_id		= mem.member_id
		and
			login.member_id		= pay.member_id
		and
			login.member_id		= par.member_id
		and
			login.member_level	= '학생'
		<!-- 수강신청 상세보기 진입 시 실행 -->
		<if test="courseEnrolleeNo != null and courseEnrolleeNo neq ''.toString()">
		and
			ce.course_enrollee_no	= #{courseEnrolleeNo}
		</if>
		
		<!-- 과목코드 선택 후 리스트 조회 -->
		<if test="subjectNo != null and subjectNo neq ''.toString() and subjectNo neq 'not'">
		and	
			sub.subject_no		= #{subjectNo}
		</if>
		
		<!-- 특정 강좌에 수강신청한 학생들 목록 조회시 실행 -->
		<if test="courseNo != null and courseNo neq ''.toString()">
		and	
			co.course_no		= #{courseNo}
		</if>
		
		<!-- 특정 학생 수강신청 목록 조회시 실행 -->
		<if test="memberId != null and memberId neq ''.toString()">
		and	
			ce.member_id		= #{memberId}
		</if>
		
		<!-- 학생 이름을 입력하여 검색 시 -->
		<if test="memberName != null and memberName neq ''.toString()">
		and
			mem.member_name like CONCAT('%',#{memberName},'%')
		</if>
		
		<!-- 시작 수강등록기간만 입력하여 검색 시 -->
		<if test="(startCourseEnrolleeDate != null and startCourseEnrolleeDate neq ''.toString()) and
				  (endCourseEnrolleeDate == null or endCourseEnrolleeDate eq ''.toString())">
		and
			ce.course_enrollee_registered_date
		>=
			#{startCourseEnrolleeDate}
		</if>
		
		<!-- 마지막 수강등록기간만 입력하여 검색 시 -->
		<if test="(startCourseEnrolleeDate == null and startCourseEnrolleeDate eq ''.toString()) and
				  (endCourseEnrolleeDate != null or endCourseEnrolleeDate neq ''.toString())">
		and
			ce.course_enrollee_registered_date
		<![CDATA[ < ]]>
			#{endCourseEnrolleeDate}
		</if>
		
		<!-- 시작 수강등록기간부터 마지막 수강등록기간까지 입력하여 검색 시 -->
		<if test="(startCourseEnrolleeDate != null and startCourseEnrolleeDate neq ''.toString()) and
				  (endCourseEnrolleeDate != null and endCourseEnrolleeDate neq ''.toString())">
		and
			ce.course_enrollee_registered_date
		between
			#{startCourseEnrolleeDate}
		and
			#{endCourseEnrolleeDate}
		</if>
		order by
			co.course_no asc, mem.member_name asc
	</select>
	
	
	<!-- 관리자 : 수강신청코드 중복확인 -->
	<select id="courseEnrolleeByCourseEnrolleeNo"
			parameterType="String"
			resultType="String">
		select
			course_enrollee_no
		from
			course_enrollee
		where
			course_enrollee_no = #{courseEnrolleeNo}
	</select>
	
	
	<!-- 관리자 : 수강신청 추가 처리 -->
	<insert id="addCourseEnrollee"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.CourseEnrollee">
		insert into course_enrollee (
			 course_enrollee_no
			,member_id
			,course_no
			,course_enrollee_registered_date
		) values (
			 #{courseEnrolleeNo}
			,#{memberId}
			,#{courseNo}
			,curdate()
		)
	</insert>
	
	
	<!-- 관리자 : 수강신청 수정처리 -->
	<update id="updateCourseEnrollee"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.CourseEnrollee">
		update
			course_enrollee
		<trim prefix="set" prefixOverrides=",">
			<if test="courseNo != null and courseNo neq ''.toString()">
				 course_no		= #{courseNo}
			</if>
		</trim>
		where
			course_enrollee_no	= #{courseEnrolleeNo}
	</update>
	
	
	<!-- 관리자 : 수강신청 삭제처리 -->
	<delete id="deleteCourseEnrollee" parameterType="String">
		delete from
			course_enrollee
		where
			course_enrollee_no = #{courseEnrolleeNo}
	</delete>
	
	
	
	
	
	<!-- 시험 날짜가 오늘보다 이전 / 이후인 모든 시험일자 강좌 리스트를 얻어온다. -->
	<!-- 시험 날짜가 오늘보다 이전 / 이후인 강사 담당 강좌의 모든 시험일자 강좌 리스트를 얻어온다. -->
	<!-- 시험 날짜가 오늘보다 이전 / 이후인 시험일자 강좌리스트의 검색 결과를 얻어온다. -->
	<!-- 시험일자 강좌 상세보기 -->
	<select id="testDayCourseOneOrList"
			parameterType="com.cafe24.smart_academy.academy_manage.course.vo.CourseRoomSearchVO"
			resultType="map">
		select
			 ed.examination_day_no					AS examinationDayNo
			,ed.examination_day						AS examinationDay
			,ed.examination_name					AS examinationName
			,ed.examination_day_reason_for_change	AS examinationDayReasonForChange
			,ed.examination_day_changed_date		AS examinationDayChangedDate
			,ed.examination_day_registered_date		AS examinationDayRegisteredDate
			,cs.schedule_no							AS scheduleNo
			,cs.schedule_day						AS scheduleDay
			,cs.schedule_period						AS schedulePeriod
			,aro.room_number						AS roomNumber
			,aro.room_floor							AS roomFloor
			,aro.room_usage							AS roomUsage
			,co.course_name							AS courseName
			,sub.subject_name						AS subjectName
			,tea.member_id							AS memberId
			,tea.course_no							AS courseNo
			,mem.member_name						AS memberName
			,mem.member_phone						AS memberPhone
		from
			 examination_day			AS ed
			,course_schedule			AS cs
			,course_room_assignment		AS cra
			,academy_room				AS aro
			,course						AS co
			,subject					AS sub
			,teacher					AS tea
			,member_login				AS login
			,member						AS mem
		where
			ed.schedule_no				= cs.schedule_no
		and
			cs.course_assignment_no		= cra.course_assignment_no
		and
			cra.room_no					= aro.room_no
		and
			cra.course_no				= co.course_no
		and
			co.course_no				= tea.course_no
		and
			co.subject_no				= sub.subject_no
		and
			tea.member_id				= login.member_id
		and
			login.member_id				= mem.member_id
		<!-- 해당 과목에 일치하는 조건 검색 -->
		<if test="subjectNo != null and subjectNo neq ''.toString() and subjectNo neq 'not'.toString()">
		and
			sub.subject_no			= #{subjectNo}
		</if>
		
		<!-- 해당 강좌에 일치하는 조건 검색 -->
		<if test="courseNo != null and courseNo neq ''.toString()">
		and
			co.course_no			= #{courseNo}
		</if>
		
		<!-- 해당 강의실에 일치하는 조건 검색 -->
		<if test="roomNo != null and roomNo neq ''.toString()">
		and
			cra.room_no				= #{roomNo}
		</if>
		
		<!-- 시험일 상세 정보 가져오기 -->
		<if test="examinationDayNo != null and examinationDayNo neq ''.toString()">
		and
			ed.examination_day_no	= #{examinationDayNo}
		</if>
		
		<!-- 시험 완료된 시험날짜 강좌리스트를 조회한다. -->
		<if test="testStandardDay eq 'testComplete'.toString()">
		and
			ed.examination_day <![CDATA[ <= ]]> date(now())
		</if>
		
		<!-- 아직 시험을 치르지 않은 시험날짜 강좌리스트를 조회한다. -->
		<if test="testStandardDay eq 'notTest'.toString()">
		and
			ed.examination_day > date(now())
		</if>
		
		<!-- 해당 강사에 일치하는 조건 검색 -->
		<!-- 강사 담당 강좌의 시험일 강좌 리스트 보기 -->
		<if test="memberId != null and memberId neq ''.toString()">
		and
			tea.member_id				= #{memberId}
		</if>
		
		<!-- 특정 학생이 수강신청한 시험일 강좌 리스트 보기 -->
		<if test="courseList != null">
		and
			co.course_no in
			<foreach collection="courseList" item="item" index="index" separator="," open="(" close=")">
				#{item,jdbcType=VARCHAR}
			</foreach>
		</if>
	</select>
	
	
	<!-- 강사 : 시험일코드 중복 확인 -->
	<select id="examinationDayByExaminationDayNo"
			parameterType="String"
			resultType="String">
		select
			examination_day_no
		from
			examination_day
		where
			examination_day_no = #{examinationDayNo}
	</select>
	
	
	<!-- 강사 : 시험일 추가 처리 -->
	<insert id="addExaminationDay"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.ExaminationDay">
		insert into examination_day (
			 examination_day_no
			,schedule_no
			,examination_day
			,examination_name
			,examination_day_is_changed
			,examination_day_registered_date
		) values (
			 #{examinationDayNo}
			,#{scheduleNo}
			,#{examinationDay}
			,#{examinationName}
			,#{examinationDayIsChanged}
			,curdate()
		)
	</insert>
	
	
	<!-- 관리자, 강사 : 시험일 수정 처리 -->
	<update id="updateExaminationDay"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.ExaminationDay">
		update
			examination_day
		<trim prefix="set" prefixOverrides=",">
			<if test="scheduleNo != null and scheduleNo neq ''.toString()">
				 schedule_no			= #{scheduleNo}
			</if>
			<if test="examinationDay != null and examinationDay neq ''.toString()">
				,examination_day		= #{examinationDay}
			</if>
			<if test="examinationName != null and examinationName neq ''.toString()">
				,examination_name		= #{examinationName}
			</if>
			<if test="examinationDayReasonForChange != null and examinationDayReasonForChange neq ''.toString()">
				,examination_day_reason_for_change		= #{examinationDayReasonForChange}
			</if>
				,examination_day_changed_date = curdate()
		</trim>
		where
			examination_day_no = #{examinationDayNo}
	</update>
	
	
	<!-- 관리자, 강사 : 시험일 삭제 처리 -->
	<delete id="deleteExaminationDay" parameterType="String">
		delete from
			examination_day
		where
			examination_day_no = #{examinationDayNo}
	</delete>
	
	
	
	
	
	<!-- 특정 검색 키워드를 입력받아 해당 키워드에 맞는 성적결과 리스트를 리턴한다. -->
	<!-- 관리자, 강사, 학생 -->
	<select id="totalGradeResultOneOrList"
			parameterType="com.cafe24.smart_academy.academy_manage.course.vo.CourseRoomSearchVO"
			resultType="map">
		select
			 co.course_no								AS courseNo
			,co.course_name								AS courseName
			,aro.room_number							AS roomNumber
			,aro.room_floor								AS roomFloor
			,ed.examination_name						AS examinationName
			,ed.examination_day							AS examinationDay
			,cen.member_id								AS memberId
			,(select
				teamem.member_name
			  from
			  	 member_login	AS tealogin
			  	,member			AS teamem
			  	,teacher		AS tea
			  where
			  	tealogin.member_id = teamem.member_id
			  and
			  	tealogin.member_id = tea.member_id
			  and
			  	tea.course_no = co.course_no)			AS teacherName
			,mem.member_name							AS studentName
			,cs.schedule_no								AS scheduleNo
			,cs.schedule_day							AS scheduleDay
			,cs.schedule_period							AS schedulePeriod
			,si.score_input_no							AS scoreInputNo
			,si.examination_day_no						AS examinationDayNo
			,si.course_enrollee_no						AS courseEnrolleeNo
			,si.grading_criteria_rating					AS gradingCriteriaRating
			,si.score_input_test_score					AS scoreInputTestScore
			,si.score_input_registered_date				AS scoreInputRegisteredDate
			,gcr.grading_criteria_start_of_section		AS gradingCriteriaStartOfSection
			,gcr.grading_criteria_end_of_section		AS gradingCriteriaEndOfSection
		from
			 score_input					AS si
			,examination_day				AS ed
			,course_schedule				AS cs
			,course_room_assignment			AS cra
			,academy_room					AS aro
			,course							AS co
			,member_login					AS login
			,member							AS mem
			,course_enrollee				AS cen
			,grading_criteria				AS gcr
		where
			si.examination_day_no		= ed.examination_day_no
		and
			ed.schedule_no				= cs.schedule_no
		and
			cra.course_assignment_no	= cs.course_assignment_no
		and
			cra.room_no					= aro.room_no
		and
			cra.course_no				= co.course_no
		and
			login.member_id				= mem.member_id
		and
			si.course_enrollee_no		= cen.course_enrollee_no
		and
			cen.member_id				= login.member_id
		and
			cen.course_no				= co.course_no
		and
			cen.course_no				= cra.course_no
		and
			si.grading_criteria_rating	= gcr.grading_criteria_rating
		<!-- 해당 과목에 일치하는 조건 검색 -->
		<if test="subjectNo != null and subjectNo neq ''.toString() and subjectNo neq 'not'.toString()">
		and
			co.subject_no			= #{subjectNo}
		</if>
		
		<!-- 해당 강좌에 일치하는 조건 검색 -->
		<if test="courseNo != null and courseNo neq ''.toString()">
		and
			co.course_no			= #{courseNo}
		</if>
		
		<!-- 해당 강의실에 일치하는 조건 검색 -->
		<if test="roomNo != null and roomNo neq ''.toString()">
		and
			cra.room_no				= #{roomNo}
		</if>
		
		<!-- 특정 학생의 성적 결과 리스트 가져오기 -->
		<if test="memberId != null and memberId neq ''.toString()">
		and
			cen.member_id			= #{memberId}
		</if>
		
		<!-- 특정 학생의 성적 결과 상세정보 가져오기 -->
		<if test="scoreInputNo != null and scoreInputNo neq ''.toString()">
		and
			si.score_input_no		= #{scoreInputNo}
		</if>
		
		<!-- 시험일 상세화면에서 해당 시험일코드를 참조하는 강좌시험성적 리스트 -->
		<!-- 해당 시험을 치룬 학생들의 성적순위 리스트 -->
		<if test="examinationDayNo != null and examinationDayNo neq ''.toString()">
		and
			ed.examination_day_no	= #{examinationDayNo}
		</if>
		
		<!-- 해당 시험을 치룬 학생들의 성적순위 리스트에서 특정 학생 검색 결과 리스트 -->
		<if test="memberName != null and memberName neq ''.toString()">
		and
			mem.member_name like CONCAT('%',#{memberName},'%')
		</if>
		
		<!-- 성적기준 상세화면에서 해당 성적기준을 참조하는 강좌시험성적 리스트 -->
		<if test="gradingCriteriaRating != null and gradingCriteriaRating neq ''.toString()">
		and
			gcr.grading_criteria_rating	= #{gradingCriteriaRating}
		</if>
		order by
			 si.score_input_test_score		desc
			,mem.member_name				asc
	</select>
	
	
	<!-- 관리자, 강사 : 성적입력코드 중복확인 -->
	<select id="scoreInputByScoreInputNo"
			parameterType="String"
			resultType="String">
		select
			score_input_no
		from
			score_input
		where
			score_input_no = #{scoreInputNo}
	</select>
	
	
	<!-- 관리자, 강사 : 해당 학생 성적 추가 처리 -->
	<insert id="addScoreInput"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.ScoreInput">
		insert into score_input (
			 score_input_no
			,examination_day_no
			,course_enrollee_no
			,grading_criteria_rating
			,score_input_test_score
			,score_input_registered_date
		) values (
			 #{scoreInputNo}
			,#{examinationDayNo}
			,#{courseEnrolleeNo}
			,#{gradingCriteriaRating}
			,#{scoreInputTestScore}
			,curdate()
		)
	</insert>
	
	
	<!-- 관리자, 강사 : 시험성적 수정 처리 -->
	<update id="updateScoreInput"
			parameterType="com.cafe24.smart_academy.academy_manage.courseandscore.vo.ScoreInput">
		update
			score_input
		<trim prefix="set" prefixOverrides=",">
			<if test="gradingCriteriaRating != null and gradingCriteriaRating neq ''.toString()">
				 grading_criteria_rating		= #{gradingCriteriaRating}
			</if>
			<if test="scoreInputTestScore != null and scoreInputTestScore neq ''.toString()">
				,score_input_test_score			= #{scoreInputTestScore}
			</if>
		</trim>
		where
			score_input_no = #{scoreInputNo}
	</update>
	
	
	<!-- 관리자, 강사 : 시험성적 삭제 처리 -->
	<delete id="deleteScoreInput"
			parameterType="String">
		delete from
			score_input
		where
			score_input_no = #{scoreInputNo}
	</delete>
</mapper>